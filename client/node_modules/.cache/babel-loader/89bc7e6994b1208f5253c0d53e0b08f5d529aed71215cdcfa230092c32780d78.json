{"ast":null,"code":"(function () {\n  var moment, replacements;\n  if (typeof require === \"function\") {\n    moment = require('moment');\n  } else {\n    moment = this.moment;\n  }\n  replacements = {\n    'a': 'ddd',\n    'A': 'dddd',\n    'b': 'MMM',\n    'B': 'MMMM',\n    'c': 'lll',\n    'd': 'DD',\n    '-d': 'D',\n    'e': 'D',\n    'F': 'YYYY-MM-DD',\n    'H': 'HH',\n    '-H': 'H',\n    'I': 'hh',\n    '-I': 'h',\n    'j': 'DDDD',\n    '-j': 'DDD',\n    'k': 'H',\n    'l': 'h',\n    'm': 'MM',\n    '-m': 'M',\n    'M': 'mm',\n    '-M': 'm',\n    'p': 'A',\n    'P': 'a',\n    'S': 'ss',\n    '-S': 's',\n    'u': 'E',\n    'w': 'd',\n    'W': 'WW',\n    'x': 'll',\n    'X': 'LTS',\n    'y': 'YY',\n    'Y': 'YYYY',\n    'z': 'ZZ',\n    'Z': 'z',\n    'f': 'SSS',\n    '%': '%'\n  };\n  moment.fn.strftime = function (format) {\n    var momentFormat, tokens;\n\n    // Break up format string based on strftime tokens\n    tokens = format.split(/(%\\-?.)/);\n    momentFormat = tokens.map(function (token) {\n      // Replace strftime tokens with moment formats\n      if (token[0] === '%' && replacements.hasOwnProperty(token.substr(1))) {\n        return replacements[token.substr(1)];\n      }\n      // Escape non-token strings to avoid accidental formatting\n      return token.length > 0 ? '[' + token + ']' : token;\n    }).join('');\n    return this.format(momentFormat);\n  };\n  if (typeof module !== \"undefined\" && module !== null) {\n    module.exports = moment;\n  } else {\n    this.moment = moment;\n  }\n}).call(this);","map":{"version":3,"names":["moment","replacements","require","fn","strftime","format","momentFormat","tokens","split","map","token","hasOwnProperty","substr","length","join","module","exports","call"],"sources":["/Users/natalia/sleeping-app/client/node_modules/moment-strftime/lib/moment-strftime.js"],"sourcesContent":["(function () {\n  var moment, replacements;\n\n  if (typeof require === \"function\") {\n    moment = require('moment');\n  } else {\n    moment = this.moment;\n  }\n\n  replacements = {\n    'a': 'ddd',\n    'A': 'dddd',\n    'b': 'MMM',\n    'B': 'MMMM',\n    'c': 'lll',\n    'd': 'DD',\n    '-d': 'D',\n    'e': 'D',\n    'F': 'YYYY-MM-DD',\n    'H': 'HH',\n    '-H': 'H',\n    'I': 'hh',\n    '-I': 'h',\n    'j': 'DDDD',\n    '-j': 'DDD',\n    'k': 'H',\n    'l': 'h',\n    'm': 'MM',\n    '-m': 'M',\n    'M': 'mm',\n    '-M': 'm',\n    'p': 'A',\n    'P': 'a',\n    'S': 'ss',\n    '-S': 's',\n    'u': 'E',\n    'w': 'd',\n    'W': 'WW',\n    'x': 'll',\n    'X': 'LTS',\n    'y': 'YY',\n    'Y': 'YYYY',\n    'z': 'ZZ',\n    'Z': 'z',\n    'f': 'SSS',\n    '%': '%'\n  };\n\n  moment.fn.strftime = function (format) {\n    var momentFormat, tokens;\n\n    // Break up format string based on strftime tokens\n    tokens = format.split(/(%\\-?.)/);\n    momentFormat = tokens.map(function (token) {\n      // Replace strftime tokens with moment formats\n      if (token[0] === '%' && replacements.hasOwnProperty(token.substr(1))) {\n        return replacements[token.substr(1)];\n      }\n      // Escape non-token strings to avoid accidental formatting\n      return token.length > 0 ? '[' + token + ']' : token;\n    }).join('');\n\n    return this.format(momentFormat);\n  };\n\n  if (typeof module !== \"undefined\" && module !== null) {\n    module.exports = moment;\n  } else {\n    this.moment = moment;\n  }\n}).call(this);\n"],"mappings":"AAAA,CAAC,YAAY;EACX,IAAIA,MAAM,EAAEC,YAAY;EAExB,IAAI,OAAOC,OAAO,KAAK,UAAU,EAAE;IACjCF,MAAM,GAAGE,OAAO,CAAC,QAAQ,CAAC;EAC5B,CAAC,MAAM;IACLF,MAAM,GAAG,IAAI,CAACA,MAAM;EACtB;EAEAC,YAAY,GAAG;IACb,GAAG,EAAE,KAAK;IACV,GAAG,EAAE,MAAM;IACX,GAAG,EAAE,KAAK;IACV,GAAG,EAAE,MAAM;IACX,GAAG,EAAE,KAAK;IACV,GAAG,EAAE,IAAI;IACT,IAAI,EAAE,GAAG;IACT,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,YAAY;IACjB,GAAG,EAAE,IAAI;IACT,IAAI,EAAE,GAAG;IACT,GAAG,EAAE,IAAI;IACT,IAAI,EAAE,GAAG;IACT,GAAG,EAAE,MAAM;IACX,IAAI,EAAE,KAAK;IACX,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,IAAI;IACT,IAAI,EAAE,GAAG;IACT,GAAG,EAAE,IAAI;IACT,IAAI,EAAE,GAAG;IACT,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,IAAI;IACT,IAAI,EAAE,GAAG;IACT,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,IAAI;IACT,GAAG,EAAE,IAAI;IACT,GAAG,EAAE,KAAK;IACV,GAAG,EAAE,IAAI;IACT,GAAG,EAAE,MAAM;IACX,GAAG,EAAE,IAAI;IACT,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,KAAK;IACV,GAAG,EAAE;EACP,CAAC;EAEDD,MAAM,CAACG,EAAE,CAACC,QAAQ,GAAG,UAAUC,MAAM,EAAE;IACrC,IAAIC,YAAY,EAAEC,MAAM;;IAExB;IACAA,MAAM,GAAGF,MAAM,CAACG,KAAK,CAAC,SAAS,CAAC;IAChCF,YAAY,GAAGC,MAAM,CAACE,GAAG,CAAC,UAAUC,KAAK,EAAE;MACzC;MACA,IAAIA,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIT,YAAY,CAACU,cAAc,CAACD,KAAK,CAACE,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;QACpE,OAAOX,YAAY,CAACS,KAAK,CAACE,MAAM,CAAC,CAAC,CAAC,CAAC;MACtC;MACA;MACA,OAAOF,KAAK,CAACG,MAAM,GAAG,CAAC,GAAG,GAAG,GAAGH,KAAK,GAAG,GAAG,GAAGA,KAAK;IACrD,CAAC,CAAC,CAACI,IAAI,CAAC,EAAE,CAAC;IAEX,OAAO,IAAI,CAACT,MAAM,CAACC,YAAY,CAAC;EAClC,CAAC;EAED,IAAI,OAAOS,MAAM,KAAK,WAAW,IAAIA,MAAM,KAAK,IAAI,EAAE;IACpDA,MAAM,CAACC,OAAO,GAAGhB,MAAM;EACzB,CAAC,MAAM;IACL,IAAI,CAACA,MAAM,GAAGA,MAAM;EACtB;AACF,CAAC,EAAEiB,IAAI,CAAC,IAAI,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}